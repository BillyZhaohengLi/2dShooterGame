

//----------BEAUTIFUL DIAGRAM FOR EXPLANING THE SHOT-WALL COLLISION ALGORITHM-------------
/*
the shot-wall collision algorithm is made up of calls to the collision resolver of individual wall segments which look like this:
---------------|
   I'm a wall  |
			   |   O shot's previous position
			   |  /
			   | /
			   |/
			   X
			  /|\
			 / | \
			p  |  O shot's position after resolving collision
---------------|
as seen in the diagram above, what it does is it uses some basic trig knowledge to calculate the shot's position given its angle it was travelling in
and its position before being resolved (marked by p). Simple high-school incidence and reflection angle stuff.

(2) This is where stuff gets tricky; let's have two walls which touch each other form a corner and let's fire a shot at the corner:
---------------|
   Wall A      |
               |
			   |
			   |
			   |  O shot's previous position
			   | / 
			   |/   O shot's expected position
		   p1  X   /
			\ /|\ /
-------------X---X-----------------|
            /              Wall B  |
		   p2			           |
								   |
								   |
								   |
now, firing the shot at this combination of wall segments, it is expected that the shot ends up at the expected position by bouncing off wall A
followed by wall B. But what if wall B comes before wall A in the wallsegment array? The collision with wall B is resolved FIRST and the shot
ends up in the awkward position of being stuck in the wall, where it bounces between p1 and p2 resolving collisions until it dissappears.
To prevent this from happening, the bounced_direction variable comes in; in this scenario, the the WRONG way to resolve collisions is to bounce
off the TOP wall of Wall B followed by the BOTTOM wall of Wall A. TOP is the opposite of BOTTOM, so now we know something's wrong; therefore we
reset the shot, reverse the order of traversal of the array and now the collision with wall A is correctly evaluated before evaluating the one
with wall B.

(3) let us consider another scenario:
              |  OP shot's previous position
	Wall A	  | /
	     p3   |/   OE shot's expected position
		  \   X   /
		   \ /|\ /
------------X-|-X-------------|
           / \|/ \            |
		  /	  X   \           |
		 p4	 /|    p1 Wall B  |
			p2|               |
in this scenario, Wall A and Wall B are touching corners; again as expected, you would expected a shot fired in a way shown in this diagram to be bounced
off wall A followed by wall B and we're done.
That's not what happens; after the shot is at the expected position, the algorithm wrongly thinks that the shot came from the point p2 due to its
travelling angle; and since p2-OE intersects with the left boundary of Wall B, it gets resolved to p3, then gets resolved to p4, then back to p1,
back to OE, and so on...
to prevent this a bounce count is added. Given level layout and the shot speed we can mathematically prove that a shot only needs to resolve at most 2 collisions
in any given frame. Once the two collisions are resolved we break the loop and none of this stuff will happen anymore.

(4) let us consider a final scenario:
             |
 I'm a wall	 |
             | OE shot's expected position
			 |/
			 X
			/|\
-----------X-| \
          / \   \
         /   \   \
        p1    \   OP shot's previous position
		       p2
In this scenario, a shot is fired at the corner of a wall; the expected behaviour is that it bounces off a wall segment ending up at OE.
however, similar to (3), after the shot is resolved to OE, the algorithm thinks that the shot came from point p1 and thus has an intersection
with the bottom segment of the wall - the shot is resolved again to p2 and files straight back at whoever fired it.
Preventing this is easy; simply not allowing a shot to bounce off a wall two times consecutively does the trick.
*/

//-----------BEAUTIFUL DIAGRAM FOR EXPLANING PLAYER-WALL COLLISION---------
/*
the player-wall collision algorithm is made up of calls to the collision handler which handles collisions between players and individual
wall segments.
(1) How does this happen? Let us look at the scenario below:
        ------
	   /      \
	  /        \
	  |   X    |
	  | player |
-----------------------|
       \      /        |
	    ------         |
		wall           |
what happens here is simple; the algorithm simply sets the player's position so the player's center X is at least "kPlayerRadius" units
plus "kEpsilon" (which is a small error margin added to account for floating point errors - using exact values may result in the collision
still being unresolved because the player's distance to the wall is slightly less than kPlayerRadius) away from the shortest distance out of 
the four distances between the player and the four segments which make up the wall.
In this case, the player is closest to the top wall segment; therefore, they will be pushed upwards.
        ------
	   /      \
	  /        \
	  |   X    |
	  | player |
      \        /
       \      /        
-----------------------|
		wall           |
(2) In cases where the shortest path from the player's center to the wall does not form a right angle with any of the wall segments (as seen below),
        ------
	   /      \
	  /        \
	  |   X    |
	  | player |
      \     |----------
       \    | /        
        ----|-   Wall
            |
the algorithm resolves the collision by drawing a line between the center of the player and the closest corner on the wall to the center of the
player, then extend the line until the line is of "kPlayerRadius" + "kEpsilon" units long, and place the player there.
        ------
	   /      \
	  /        \
	  |   X    |
	  | player |
      \        |
       \      /|------        
        ------ | Wall
               |
(3) In cases where a player collides with 2 walls (which happens when a player moves diagonally into a corner), the collision is resolved
sequentially one wall followed by the other.
        ------|
	   /      |
	  /       |\
	  |   X   ||
	  | player||
--------------||  wall A
       \      |    
        ------|
    Wall B    |
              |
first resolve the collision with wall A (it depends on which one comes first in the array, which in turn depends on which wall segment
was created first)
      ------  |
	 /      \ |
	/        \|
	|   X    ||
	| player ||
--------------|  wall A
     \      / |    
      ------  |
    Wall B    |
              |
then resolve the collision with wall B and we're done.
      ------  |
	 /      \ |
	/        \|
	|   X    ||
	| player ||
    \        /|  wall A
     \      / |    
      ------  |
------------- |
   Wall B     |
And no, given the walls being spawned on a grid, the smallest distance between two perpendicular wall segments is slightly larger
than the player's diameter, so even though resolving collisions with 3 wall segments at once would likely result in an infinite loop,
it would never happen (at least with the current structure of this game)
  |   ------  |
  |  /      \ |
  |	/        \|
  |	|   X    ||
  |	| player ||
  | \        /|  wall A
  |  \      / |    
  |   ------  |
------------- |
   Wall B     |
*/

//-----------BEAUTIFUL DIAGRAM FOR EXPLANING THE CLOSED PATH CHECKER ALGORITHM---------
/*
This is really just a reiteration of the CS125 maze traversal algorithm where you hug the right wall.
If we set p1 (who spawns in the bottom left-hand corner) to be the start and p2 (who spawns in the top
right-hand corner), then we can let the algorithm do its job by starting from p1 and finding its way to
p2. If at some point the pointer goes back to p1 without reaching p2, then there is no valid path between
p1 and p2:
xxxxxxxxxxx
x    x  p2x
x    x    x
xp1  x    x
xxxxxxxxxxx
It can be mathematically proven that infinite loops will not happen in this algorithm, though this is not
a CS173 examlet so no such proof would be given here.

So how does the algorithm actually work?
xxxxxxxxxxx
x        Dx
x x       x
x  x      x
xox       x
xxxxxxxxxxx
let's say the x's represent walls, the o represets the checker, and the D is the destination. The checker starts out facing East; they try to move
right, which is south. The attempt fails. Then they try to move forward (east), which also fails. They successfully
move north.
xxxxxxxxxxx
x        Dx
x x       x
xo x      x
x x       x
xxxxxxxxxxx
since the checker successfully moved north, they are now facing north; the checker will now again try to move right (east),
and successfully does so.
xxxxxxxxxxx
x        Dx
x x       x
x ox      x
x x       x
xxxxxxxxxxx
then they check right(south), forward(east) and left(north) but none of them are valid. The checker is in a dead end; 
the checker thus moves backwards(west).
xxxxxxxxxxx
x        Dx
x x       x
xo x      x
x x       x
xxxxxxxxxxx
the checker successfully moves right (north), and so on until it successfully reaches its destination.
Therefore, this map has a valid path between p1 and p2.
xxxxxxxxxxx
x        Dx
xox       x
x  x      x
x x       x
xxxxxxxxxxx
*/
 